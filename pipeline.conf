input {
    ##################################
    # Autor: carlosjose203@gmail.com #
    ##################################
    file {
        path => "/var/log/mariadb/mysql_slow_query.log"
        type => "mysql_slow_query"
        start_position => "beginning"
    }

    file {
        codec => multiline {
          pattern => "[0-9]\ (Quit|Query|Init|Connect)"
          negate => "true"
          what => "previous"
        }
        type => "mysql_general"
        path => "/var/log/mariadb/mysql_general.log"
        start_position => beginning 
    }
}
filter {

    if [type] == "mysql_slow_query" {
    # thansk to= https://github.com/lesaux/logstash-mysql-slow-queries-filter/blob/master/filter-mysql
    # for mysql_slow_query filter

            if [message] =~ "# Time: " {
                 drop{}
            }
            multiline {
                # anything not starting with # or SET is the actual query being run so roll it up with
                # the previous entries
                pattern => "^#|^SET"
                negate => true
                what => "previous"
            }
            grok {
                match => {
                    message => [
                        "# User@Host: %{WORD:user}\[%{WORD}\] @ (%{IPORHOST:client_hostname}|) \[(%{IP:client_ip}|)\]",
                    "# Thread_id: %{NUMBER:thread_id:int} \s*Schema: (%{WORD:schema}| ) \s*Last_errno: %{NUMBER:last_errno:int} \s*Killed: %{NUMBER:killed:int}",
                        "# Query_time: %{NUMBER:query_time:float} \s*Lock_time: %{NUMBER:lock_time:float} \s*Rows_sent: %{NUMBER:rows_sent:int} \s*Rows_examined: %{NUMBER:rows_examined:int} \s*Rows_affected: %{NUMBER:rows_affected:int} \s*Rows_read: %{NUMBER:rows_read:int}",
                        "# Bytes_sent: %{NUMBER:bytes_sent:int}",
                        "(?m)SET timestamp=%{NUMBER:timestamp};%{GREEDYDATA:mysql_query}"
                    ]
                }
            }
            mutate {
                gsub => ["mysql_query", "\n", " "]
                gsub => ["mysql_query", "\r", " "]
                gsub => ["mysql_query", "LINE_BREAK", " "]
            }
            multiline {
                # you would think if we set the pattern to "# Time" with that as a pattern in
                # grok rather than skipping in the (deprecated) grep we would solve the problem
                # of not capturing fields on the User@Host line but unfortunately that doesn't
                # work because the Time line is not always present. so we have to hook onto
                # the User@Host line, the consequence of which is its fields not being captured
                pattern => "(# User|# Thread|# Query|# Time|# Bytes)"
                negate => false
                what => "next"
            }
            date {
                # use the value from SET timestamp as the timestamp of the event
                match => [ "timestamp","UNIX" ]
            }
            mutate {
                gsub => [
                    # pattern url = http://regexr.com/3d60d

                  "mysql_query", "( ? in \([\d{1,}|\W{1,}].*\))", " in (?) ",
                  "mysql_query", "( ?=[0-9\ \"\'](.*?)[0-9\"\'] (?!word))|( ?=([\ \"\'0-9a-zA-Z]{1,}[\"\'0-9])|( ?=[0-9]))", " = ? "
                    ]
              }
            mutate {
                # and then remove the timestamp field as it becomes redundant
                remove_field => [ "timestamp" ]
            }
            }
    else {
        if "Quit" in [message]{
          drop{} # We don't need the dummy line so drop it
        }
        mutate {
            gsub => ["message", "\n", " "]
            gsub => ["message", "\r", " "]
            gsub => ["message", "LINE_BREAK", " "]
        }
        csv {
           columns => ["fecha","query","mysql_query", "algo"]
           separator => "	"
          }
        prune {
            blacklist_names => [ "^column" ]
        }

        if [fecha] {
            grok {
                match => { "query" => "%{NUMBER:connection} %{GREEDYDATA:method}" }
                remove_field => [ "query" ]
                }
            mutate {
                # pattern url = http://regexr.com/3d60d

                gsub => [
                  "mysql_query", "( ? in \([\d{1,}|\W{1,}].*\))", " in (?) ",
                  "mysql_query", "( ?=[0-9\ \"\'](.*?)[0-9\"\'] (?!word))|( ?=([\ \"\'0-9a-zA-Z]{1,}[\"\'0-9])|( ?=[0-9]))", " = ? "
                    ]
              }
        } else {
            grok {
                match => { "mysql_query" => "%{NUMBER:connection} %{GREEDYDATA:method}" }
                }
            mutate {
                # pattern url = http://regexr.com/3d60d

                update => [ "mysql_query", "%{algo}" ]
                gsub => [
                  "mysql_query", "( ? in \([\d{1,}|\W{1,}].*\))", " in (?) ",
                  "mysql_query", "( ?=[0-9\ \"\'](.*?)[0-9\"\'] (?!word))|( ?=([\ \"\'0-9a-zA-Z]{1,}[\"\'0-9])|( ?=[0-9]))", " = ? "
                    ]
                remove_field => [ "query", "algo"]
                  }
            }
        }
    }

output {
    stdout { codec => rubydebug }
    if [type] == "mysql_slow_query" {
        elasticsearch {
            hosts => ["localhost:9200"]
            index => "mysql_slow_log"
        }
    } else {
        elasticsearch {
            hosts => ["localhost:9200"]
            index => "mysql_log"
        }
    }
}

